{"ast":null,"code":"import { ref, push, onValue, set, remove } from \"firebase/database\";\nimport { db } from './firebaseConfig';\nexport function saveMeal({\n  mealName,\n  recipe,\n  mealType,\n  day,\n  imageUrl = ''\n}, callback) {\n  let mealsRef;\n  if (!day) {\n    mealsRef = ref(db, 'meals/' + \"Any\");\n  } else {\n    mealsRef = ref(db, 'meals/' + day);\n  }\n  push(mealsRef, {\n    mealName,\n    recipe,\n    mealType,\n    imageUrl\n  }).then(() => {\n    callback();\n  }).catch(error => {\n    console.error('Error saving meal: ', error);\n  });\n}\nexport const fetchMealsForDay = (day, callback) => {\n  const mealsRef = ref(db, 'meals/' + day);\n  onValue(mealsRef, snapshot => {\n    const data = snapshot.val();\n    if (data) {\n      const meals = Object.values(data).map(item => item.mealName);\n      callback(meals);\n    } else {\n      callback([]);\n    }\n  }, {\n    onlyOnce: true\n  });\n};\nexport const updateMeal = (dayId, mealId, mealData, callback) => {\n  const mealRef = ref(db, `meals/${dayId}/${mealId}`);\n  return set(mealRef, mealData).then(() => {\n    console.log('Meal updated successfully');\n    if (callback) callback();\n  }).catch(error => {\n    console.error('Error updating meal:', error);\n    throw error;\n  });\n};\nexport const removeMeal = (dayId, mealId, callback) => {\n  const mealRef = ref(db, `meals/${dayId}/${mealId}`);\n  return remove(mealRef).then(() => {\n    console.log('Meal successfully deleted:', mealId, dayId);\n    callback();\n  }).catch(error => {\n    console.error('Error removing meal:', mealId, error);\n    throw error;\n  });\n};\nexport const fetchMeals = callback => {\n  const mealsRef = ref(db, 'meals/Any');\n  onValue(mealsRef, snapshot => {\n    const data = snapshot.val();\n    const meals = data ? Object.entries(data).map(([mealKey, mealValue]) => {\n      return {\n        id: mealKey,\n        ...mealValue\n      };\n    }) : [];\n    // console.log('Meals fetched:', meals);\n    callback(meals);\n  });\n};\nexport const fetchMealsFromAny = callback => {\n  const mealsRef = ref(db, 'meals/Any');\n  onValue(mealsRef, snapshot => {\n    const data = snapshot.val();\n    if (data) {\n      const meals = Object.values(data).map((meal, index) => ({\n        id: Object.keys(data)[index],\n        ...meal\n      }));\n      callback(meals);\n    } else {\n      callback([]);\n    }\n  }, {\n    onlyOnce: true\n  });\n};\nexport const fetchMealById = (mealId, callback) => {\n  const mealRef = ref(db, `meals/Any/${mealId}`);\n  onValue(mealRef, snapshot => {\n    const mealData = snapshot.val();\n    if (mealData) {\n      callback(mealData);\n    } else {\n      console.error(\"No meal found with ID:\", mealId);\n      callback(null);\n    }\n  }, {\n    onlyOnce: true\n  });\n};\nexport const removeMealByName = (day, mealName, callback) => {\n  const mealsRef = ref(db, `meals/${day}`);\n\n  // Fetch all meals for the given day\n  onValue(mealsRef, snapshot => {\n    const mealsData = snapshot.val();\n    if (mealsData) {\n      const meals = Object.entries(mealsData).map(([key, value]) => ({\n        id: key,\n        ...value\n      }));\n      const mealToRemove = meals.find(meal => meal.mealName === mealName);\n      if (mealToRemove) {\n        const mealRef = ref(db, `meals/${day}/${mealToRemove.id}`);\n        remove(mealRef).then(() => {\n          console.log(\"Meal successfully deleted:\", mealToRemove.mealName, day);\n          callback(true);\n        }).catch(error => {\n          console.error(\"Error removing meal:\", error);\n          callback(false, error);\n        });\n      } else {\n        console.log(\"No meal found with the name:\", mealName);\n        callback(false);\n      }\n    } else {\n      console.log(\"No meals found on the day:\", day);\n      callback(false);\n    }\n  }, {\n    onlyOnce: true\n  });\n};\nexport const fetchMealByName = (mealName, callback) => {\n  const mealsRef = ref(db, 'meals/Any');\n  onValue(mealsRef, snapshot => {\n    const mealsData = snapshot.val();\n    let found = false;\n    if (mealsData) {\n      Object.entries(mealsData).forEach(([key, value]) => {\n        if (value.mealName.toLowerCase() === mealName.toLowerCase()) {\n          callback({\n            id: key,\n            ...value\n          }, null);\n          found = true;\n        }\n      });\n      if (!found) {\n        console.error(\"No meal found with the name:\", mealName);\n        callback(null, \"No meal found with the name: \" + mealName);\n      }\n    } else {\n      console.error(\"No meals found\");\n      callback(null, \"No meals found\");\n    }\n  }, {\n    onlyOnce: true\n  });\n};","map":{"version":3,"names":["ref","push","onValue","set","remove","db","saveMeal","mealName","recipe","mealType","day","imageUrl","callback","mealsRef","then","catch","error","console","fetchMealsForDay","snapshot","data","val","meals","Object","values","map","item","onlyOnce","updateMeal","dayId","mealId","mealData","mealRef","log","removeMeal","fetchMeals","entries","mealKey","mealValue","id","fetchMealsFromAny","meal","index","keys","fetchMealById","removeMealByName","mealsData","key","value","mealToRemove","find","fetchMealByName","found","forEach","toLowerCase"],"sources":["D:/Work/Front End Development/meal-planner-main/src/services/mealServices.js"],"sourcesContent":["import { ref, push, onValue, set, remove } from \"firebase/database\";\nimport { db } from './firebaseConfig';\n\nexport function saveMeal({ mealName, recipe, mealType, day, imageUrl = '' }, callback) {\n  let mealsRef;\n  if (!day) {\n    mealsRef = ref(db, 'meals/' + \"Any\");\n  } else {\n    mealsRef = ref(db, 'meals/' + day);\n  }\n    push(mealsRef, {\n      mealName,\n      recipe,\n      mealType,\n      imageUrl\n    }).then(() => {\n      callback();   \n    }).catch(error => {\n      console.error('Error saving meal: ', error);\n    });\n}\n\nexport const fetchMealsForDay = (day, callback) => {\n    const mealsRef = ref(db, 'meals/' + day);\n    onValue(mealsRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const meals = Object.values(data).map(item => item.mealName);  \n        callback(meals);  \n      } else {\n        callback([]);  \n      }\n    }, {\n      onlyOnce: true\n    });\n  };\n  \n\n  export const updateMeal = (dayId, mealId, mealData, callback) => {\n    const mealRef = ref(db, `meals/${dayId}/${mealId}`);\n    return set(mealRef, mealData)  \n      .then(() => {\n        console.log('Meal updated successfully');\n        if (callback) callback();\n      })\n      .catch(error => {\n        console.error('Error updating meal:', error);\n        throw error; \n      });\n  };  \n  \n  export const removeMeal = (dayId, mealId, callback) => {\n    const mealRef = ref(db, `meals/${dayId}/${mealId}`);\n    return remove(mealRef).then(() => {\n      console.log('Meal successfully deleted:', mealId, dayId);\n      callback();\n    }).catch(error => {\n      console.error('Error removing meal:', mealId, error);\n      throw error;\n    });\n  };\n  \n\n  export const fetchMeals = (callback) => {\n    const mealsRef = ref(db, 'meals/Any');\n    onValue(mealsRef, (snapshot) => {\n      const data = snapshot.val();\n      const meals = data ? Object.entries(data).map(([mealKey, mealValue]) => {\n        return { id: mealKey, ...mealValue };\n      }) : [];\n      // console.log('Meals fetched:', meals);\n      callback(meals);\n    });\n};\n\n  \n  export const fetchMealsFromAny = (callback) => {\n    const mealsRef = ref(db, 'meals/Any');\n    onValue(mealsRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const meals = Object.values(data).map((meal, index) => ({\n          id: Object.keys(data)[index],\n          ...meal\n        }));\n        callback(meals);  \n      } else {\n        callback([]);  \n      }\n    }, {\n      onlyOnce: true\n    });\n};\n\n  export const fetchMealById = (mealId, callback) => {\n    const mealRef = ref(db, `meals/Any/${mealId}`);\n    onValue(mealRef, (snapshot) => {\n        const mealData = snapshot.val();\n        if (mealData) {\n            callback(mealData);\n        } else {\n            console.error(\"No meal found with ID:\", mealId);\n            callback(null); \n        }\n    }, {\n        onlyOnce: true\n    });\n};\n\nexport const removeMealByName = (day, mealName, callback) => {\n  const mealsRef = ref(db, `meals/${day}`);\n\n  // Fetch all meals for the given day\n  onValue(mealsRef, (snapshot) => {\n      const mealsData = snapshot.val();\n\n      if (mealsData) {\n          const meals = Object.entries(mealsData).map(([key, value]) => ({\n              id: key,\n              ...value\n          }));\n\n          const mealToRemove = meals.find(meal => meal.mealName === mealName);\n\n          if (mealToRemove) {\n              const mealRef = ref(db, `meals/${day}/${mealToRemove.id}`);\n              remove(mealRef).then(() => {\n                  console.log(\"Meal successfully deleted:\", mealToRemove.mealName, day);\n                  callback(true); \n              }).catch(error => {\n                  console.error(\"Error removing meal:\", error);\n                  callback(false, error); \n              });\n          } else {\n              console.log(\"No meal found with the name:\", mealName);\n              callback(false); \n          }\n      } else {\n          console.log(\"No meals found on the day:\", day);\n          callback(false); \n      }\n  }, {\n      onlyOnce: true\n  });\n};\n\nexport const fetchMealByName = (mealName, callback) => {\n  const mealsRef = ref(db, 'meals/Any'); \n  onValue(mealsRef, (snapshot) => {\n      const mealsData = snapshot.val();\n      let found = false;\n      if (mealsData) {\n          Object.entries(mealsData).forEach(([key, value]) => {\n              if (value.mealName.toLowerCase() === mealName.toLowerCase()) {\n                  callback({ id: key, ...value }, null);\n                  found = true;\n              }\n          });\n          if (!found) {\n              console.error(\"No meal found with the name:\", mealName);\n              callback(null, \"No meal found with the name: \" + mealName);\n          }\n      } else {\n          console.error(\"No meals found\");\n          callback(null, \"No meals found\");\n      }\n  }, {\n      onlyOnce: true\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}